var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.12,1,1.894]],["body/controllers/AppController.html",[0,1.869,1,3.161,2,1.539,3,0.515,4,0.444,5,0.444,6,3.44,7,0.625,8,0.037,9,1.039,10,2.719,11,3.44,12,0.515,13,0.025,14,2.317,15,1.876,16,0.031,17,0.031]],["title/modules/AppModule.html",[18,1.016,19,1.894]],["body/modules/AppModule.html",[1,2.879,2,1.49,3,0.363,4,0.313,5,0.491,7,0.68,8,0.038,9,0.732,10,2.681,11,2.426,12,0.363,13,0.017,16,0.025,17,0.025,18,1.743,19,3.659,20,1.323,21,1.323,22,1.634,23,1.634,24,1.323,25,2.563,26,1.634,27,2.426,28,2.426,29,2.426,30,2.681,31,2.987,32,2.418,33,2.244,34,1.634,35,1.466,36,2.938,37,2.521,38,2.938,39,2.938,40,2.938,41,2.938,42,2.938,43,2.426,44,2.938,45,1.323,46,2.426,47,2.426,48,1.835,49,2.938]],["title/injectables/AppService.html",[10,1.513,50,1.12]],["body/injectables/AppService.html",[3,0.496,4,0.427,5,0.427,7,0.496,8,0.037,9,1,10,2.467,12,0.496,13,0.024,16,0.03,17,0.03,50,1.826,51,2.231,52,3.313,53,0.811,54,2.225,55,5.594,56,1.106,57,4.013,58,1.806,59,1.362,60,1.806,61,4.013,62,4.013]],["title/controllers/AuthController.html",[0,1.12,63,1.894]],["body/controllers/AuthController.html",[0,1.524,2,1.524,3,0.51,4,0.44,5,0.44,7,0.622,8,0.037,9,1.029,12,0.51,13,0.025,14,2.295,15,1.858,16,0.031,17,0.031,63,3.142,64,3.407,65,2.933,66,4.128,67,2.442,68,3.407,69,4.128]],["title/modules/AuthModule.html",[18,1.016,30,1.513]],["body/modules/AuthModule.html",[2,1.598,3,0.403,4,0.347,5,0.347,7,0.64,8,0.037,9,0.812,12,0.403,13,0.019,16,0.027,17,0.027,18,1.628,20,1.467,21,1.467,22,1.812,23,1.812,24,1.467,25,2.702,26,2.702,30,2.82,32,1.948,33,2.406,34,1.812,35,1.626,37,2.036,48,2.036,63,3.035,67,2.68,68,2.69,70,2.69,71,2.69,72,2.69,73,3.259,74,2.703,75,3.259,76,2.69,77,3.259,78,1.812,79,1.812,80,1.626,81,3.259,82,3.259]],["title/injectables/AuthService.html",[50,1.12,67,1.365]],["body/injectables/AuthService.html",[3,0.368,4,0.317,5,0.317,7,0.504,8,0.038,9,0.743,12,0.368,13,0.018,15,1.341,16,0.025,17,0.025,45,1.341,50,1.504,51,1.656,53,0.602,54,1.833,56,1.279,58,1.833,59,1.59,60,1.833,67,1.833,74,1.861,78,1.656,79,1.656,83,2.459,84,3,85,4.119,86,4.073,87,2.894,88,2.459,89,2.249,90,2.979,91,1.833,92,1.833,93,1.015,94,1.238,95,2.979,96,2.459,97,4.073,98,3.832,99,2.581,100,2.979,101,2.116,102,2.116,103,2.459,104,2.459,105,2.459,106,2.459,107,1.861,108,2.979,109,2.979,110,2.459]],["title/classes/CreatePostDto.html",[13,0.018,111,1.686]],["body/classes/CreatePostDto.html",[3,0.15,4,0.129,5,0.129,7,0.463,8,0.038,12,0.15,13,0.016,16,0.013,17,0.013,48,0.756,53,0.245,56,1.239,59,1.431,80,1.317,93,1.32,94,1.44,110,3.091,111,1.133,112,0.493,113,0.999,114,1.075,115,3.744,116,2.64,117,2.64,118,2.64,119,2.64,120,2.64,121,3.455,122,2.612,123,3.455,124,2.556,125,2.024,126,2.852,127,2.307,128,3.308,129,1.211,130,1.211,131,2.038,132,2.038,133,3.452,134,1.211,135,1.211,136,1.934,137,1.211,138,3.744,139,2.179,140,1.448,141,2.038,142,1.211,143,1.211,144,1.211,145,2.852,146,2.038,147,1.969,148,3.096,149,3.096,150,2.038,151,1.211,152,3.096,153,3.096,154,1.448,155,2.038,156,2.038,157,2.038,158,2.038,159,2.038,160,2.556,161,1.211,162,3.092,163,0.999,164,2.214,165,2.038,166,1.448,167,2.038,168,1.683,169,2.038,170,2.038,171,1.211,172,1.211,173,2.038,174,2.038,175,2.556,176,1.448,177,1.683,178,2.038,179,2.038,180,2.038,181,2.038,182,1.211,183,1.211,184,2.038,185,1.211,186,1.211,187,2.038,188,1.211,189,1.211,190,2.038,191,1.683,192,1.211,193,1.211,194,4.182,195,1.211,196,2.038,197,1.211,198,1.211,199,2.64,200,1.211,201,2.038,202,2.038,203,2.158,204,2.66,205,2.455,206,2.038,207,0.999,208,0.999,209,2.64,210,0.545,211,0.999,212,0.999,213,0.86,214,1.211,215,1.211,216,1.448,217,0.999,218,0.756,219,2.852,220,3.287,221,0.604,222,0.999,223,1.273,224,1.211,225,1.211,226,2.038,227,1.211,228,1.211,229,1.211,230,2.64,231,1.211,232,1.211,233,0.86,234,0.999,235,1.683,236,0.999,237,1.211,238,0.999,239,0.999,240,1.875,241,0.999,242,1.211,243,1.211,244,1.448,245,1.211,246,0.999,247,0.999,248,0.999,249,1.448,250,0.999,251,1.211,252,1.211,253,1.649,254,2.038,255,0.999,256,0.999,257,0.86,258,0.86,259,1.211]],["title/classes/CreatePostMetaOptionDto.html",[13,0.018,136,1.894]],["body/classes/CreatePostMetaOptionDto.html",[3,0.46,4,0.396,5,0.396,7,0.46,8,0.037,12,0.46,13,0.028,16,0.029,17,0.029,53,0.752,56,1.299,59,1.299,93,1.175,112,1.515,114,1.921,125,2.123,136,2.946,164,2.879,203,3.401,205,3.351,210,1.674,216,3.679,240,3.679,260,4.274,261,3.071,262,3.72,263,3.72,264,3.72]],["title/classes/CreateUserDto.html",[13,0.018,265,1.513]],["body/classes/CreateUserDto.html",[3,0.328,4,0.282,5,0.282,7,0.464,8,0.037,12,0.328,13,0.022,16,0.023,17,0.023,53,0.536,56,1.38,59,1.552,93,1.248,94,1.142,98,3.6,101,3.099,112,1.08,114,1.53,125,2.254,154,2.668,203,3.128,204,2.668,205,3.558,207,3.1,208,2.188,210,1.193,236,3.1,238,3.1,239,3.1,265,1.874,266,2.188,267,4.362,268,3.6,269,4.362,270,2.651,271,2.651,272,2.651,273,2.651,274,2.651,275,2.651,276,2.651,277,2.651,278,2.651,279,4.744,280,3.756,281,3.756,282,3.756,283,5.2,284,3.756,285,2.088,286,3.756,287,3.756,288,2.651,289,3.756,290,2.651,291,1.656,292,2.651,293,3.756,294,2.651,295,1.474,296,2.651,297,2.651]],["title/classes/GetUserParamDto.html",[13,0.018,298,1.686]],["body/classes/GetUserParamDto.html",[3,0.394,4,0.339,5,0.339,7,0.594,8,0.038,12,0.394,13,0.032,16,0.026,17,0.026,45,1.919,53,0.644,56,0.878,59,1.175,80,1.59,93,1.198,94,1.296,99,2.974,112,1.298,114,1.737,125,1.434,126,2.631,128,2.663,147,1.298,204,3.029,210,1.919,218,2.663,220,3.519,221,1.59,253,1.991,285,2.853,295,1.772,298,2.371,299,3.519,300,2.631,301,3.029,302,3.187,303,3.187,304,3.519,305,3.187,306,3.187,307,2.631,308,2.264,309,3.187,310,3.187,311,1.772,312,2.631,313,3.187,314,2.264,315,3.187,316,3.187]],["title/classes/IsEqualTo.html",[13,0.018,317,2.154]],["body/classes/IsEqualTo.html",[3,0.3,4,0.259,5,0.259,7,0.436,8,0.038,12,0.3,13,0.027,16,0.022,17,0.022,48,1.517,53,0.491,54,1.587,56,0.972,58,1.587,59,1.391,60,1.869,91,1.587,92,2.051,93,0.879,94,1.072,96,2.004,107,2.594,112,0.989,140,1.725,154,1.725,164,1.961,175,2.911,176,3.238,177,2.004,210,1.587,217,2.004,223,2.203,244,3.238,249,1.725,250,2.004,265,1.76,291,2.203,295,1.35,311,1.961,317,3.238,318,1.725,319,3.527,320,4.153,321,3.527,322,3.762,323,3.527,324,2.428,325,4.84,326,3.527,327,4.557,328,2.428,329,3.527,330,3.762,331,3.527,332,2.004,333,4.557,334,2.428,335,2.004,336,2.428,337,3.527,338,4.153,339,4.153,340,3.527,341,3.527,342,2.428,343,2.428,344,2.428,345,2.428,346,1.725,347,2.428,348,2.004,349,4.153,350,2.428,351,2.428,352,2.428]],["title/classes/PatchPostDto.html",[13,0.018,353,1.894]],["body/classes/PatchPostDto.html",[3,0.427,4,0.368,5,0.368,7,0.654,8,0.038,12,0.427,13,0.03,16,0.028,17,0.028,53,0.698,56,0.952,93,1.246,99,3.053,111,1.92,112,1.407,114,1.831,125,1.554,127,2.243,147,1.407,203,2.808,210,1.554,218,2.157,219,3.711,221,1.723,285,2.78,304,3.711,353,2.808,354,2.851,355,3.711,356,4.496,357,3.454,358,4.496,359,3.454,360,3.454,361,3.454,362,2.851,363,2.851]],["title/classes/PatchUserDto.html",[13,0.018,364,1.894]],["body/classes/PatchUserDto.html",[3,0.462,4,0.398,5,0.398,7,0.585,8,0.037,12,0.462,13,0.028,16,0.029,17,0.029,94,1.136,112,1.522,114,1.926,176,2.655,223,2.334,253,2.954,258,3.36,265,1.864,295,2.078,311,2.078,332,3.084,355,3.903,362,3.903,364,2.954,365,3.084,366,4.729,367,3.084,368,3.903,369,3.736,370,3.736,371,3.084,372,3.084,373,3.736,374,4.729,375,3.736]],["title/controllers/PostController.html",[0,1.12,376,1.894]],["body/controllers/PostController.html",[0,0.817,2,0.817,3,0.273,4,0.236,5,0.236,7,0.604,8,0.038,9,0.551,12,0.273,13,0.013,14,1.23,15,0.995,16,0.02,17,0.02,53,0.447,54,1.482,56,1.084,58,1.77,59,1.084,60,0.995,65,1.571,78,1.831,79,1.23,84,2.953,91,1.77,92,1.77,93,0.98,94,1.196,111,2.715,122,2.056,125,1.77,127,2.65,133,3.596,147,1.775,162,1.571,166,1.571,211,1.825,212,1.825,213,1.571,221,1.103,258,2.339,308,1.571,353,3.05,363,2.718,376,2.056,377,1.825,378,3.292,379,3.292,380,3.292,381,2.211,382,3.292,383,2.339,384,3.292,385,4.357,386,4.357,387,3.292,388,2.211,389,2.211,390,3.292,391,2.211,392,3.292,393,2.211,394,2.718,395,2.211,396,2.718,397,3.292,398,3.596,399,2.211,400,2.211,401,1.825,402,2.718,403,1.962,404,1.825,405,3.246,406,3.246,407,1.825,408,2.211,409,2.211,410,2.211,411,2.211,412,2.211,413,2.211,414,2.211,415,2.718,416,2.718,417,2.211,418,2.211,419,2.211,420,2.211,421,2.211]],["title/modules/PostModule.html",[18,1.016,31,1.686]],["body/modules/PostModule.html",[2,1.59,3,0.4,4,0.345,5,0.345,7,0.683,8,0.037,9,0.806,12,0.4,13,0.019,16,0.027,17,0.027,18,1.801,20,1.456,21,1.456,22,1.799,23,1.799,24,1.456,25,2.692,26,1.799,31,3.186,32,2.487,33,2.394,34,1.799,35,1.614,37,2.69,43,2.67,45,1.456,47,2.67,76,2.67,80,1.614,376,3.023,403,2.758,404,2.67,422,2.67,423,3.234,424,2.67,425,3.234,426,3.234,427,2.02,428,2.67,429,3.234,430,3.234]],["title/injectables/PostService.html",[50,1.12,403,1.513]],["body/injectables/PostService.html",[3,0.385,4,0.332,5,0.332,7,0.519,8,0.038,9,0.777,12,0.385,13,0.019,14,1.734,15,1.403,16,0.026,17,0.026,18,1.408,45,2.389,50,1.552,51,1.734,53,0.63,54,1.891,56,1.158,58,1.403,59,1.309,60,1.403,78,1.734,79,1.734,84,2.642,87,2.215,88,2.574,89,2.227,91,1.891,92,1.891,93,1.047,94,1.277,103,2.574,107,1.948,124,3.468,127,1.556,394,2.574,403,2.097,427,1.948,431,2.574,432,4.202,433,3.118,434,4.202,435,3.118,436,3.118,437,3.118,438,1.948,439,3.118,440,2.574,441,3.468,442,3.118]],["title/injectables/UserService.html",[50,1.12,89,1.235]],["body/injectables/UserService.html",[3,0.282,4,0.243,5,0.243,7,0.495,8,0.038,9,0.569,12,0.282,13,0.024,15,1.027,16,0.021,17,0.021,45,1.991,50,1.244,51,1.269,53,0.461,54,1.516,56,1.104,58,1.516,59,0.928,60,1.516,67,2.299,74,1.425,78,1.269,79,1.269,84,2.746,85,1.883,87,2.394,89,1.372,91,1.803,92,1.803,93,0.998,94,1.218,99,2.624,101,3.143,102,1.621,104,1.883,105,1.883,106,1.883,107,1.425,147,0.929,268,3.651,285,3.028,298,2.746,301,2.394,438,2.763,443,1.883,444,3.369,445,2.781,446,3.369,447,2.394,448,3.369,449,4.006,450,3.369,451,2.281,452,2.281,453,2.281,454,3.306,455,2.846,456,2.281,457,3.651,458,4.423,459,3.369,460,2.281,461,1.883,462,1.883,463,2.281,464,2.281,465,2.281,466,3.369,467,3.369,468,2.281,469,2.281,470,2.281]],["title/controllers/UsersController.html",[0,1.12,471,1.894]],["body/controllers/UsersController.html",[0,1.333,2,0.575,3,0.192,4,0.166,5,0.166,7,0.523,8,0.038,9,0.388,12,0.192,13,0.009,14,0.865,15,0.701,16,0.015,17,0.015,45,0.701,53,0.314,54,1.128,56,0.867,58,1.417,59,0.429,60,1.781,65,1.106,80,1.251,84,2.655,89,1.282,91,1.417,92,1.781,93,1.108,94,1.203,99,1.394,102,1.106,122,0.972,125,1.417,127,1.571,128,2.254,139,2.979,140,2.564,147,1.722,160,1.285,163,1.285,164,1.394,221,0.777,222,2.598,240,1.781,244,1.781,248,1.285,253,0.972,255,1.285,256,2.069,257,1.781,265,2.11,285,2.961,298,2.351,301,2.564,307,3.818,308,3.004,311,0.865,314,1.106,322,2.069,335,2.069,346,1.781,348,1.285,364,2.889,371,1.285,372,2.598,383,1.781,398,2.069,401,2.069,402,2.598,405,2.069,406,2.069,407,1.285,415,1.285,416,2.069,427,0.972,438,2.471,440,1.285,441,1.285,447,1.106,454,3.818,455,3.392,457,1.285,461,1.285,462,1.285,471,1.566,472,1.285,473,3.148,474,2.507,475,1.556,476,1.556,477,1.556,478,1.556,479,2.507,480,2.507,481,2.507,482,1.556,483,2.507,484,1.556,485,2.507,486,2.507,487,2.507,488,1.556,489,2.507,490,2.507,491,1.556,492,1.556,493,1.556,494,1.285,495,1.556,496,3.609,497,1.556,498,1.556,499,3.148,500,1.556,501,1.556,502,1.556,503,1.556,504,1.556,505,2.507,506,1.556,507,1.556,508,1.556,509,1.556,510,1.556,511,1.556,512,1.556,513,1.556,514,1.106,515,1.556,516,1.556,517,1.285,518,1.556,519,1.556,520,1.556,521,3.148,522,1.556,523,1.556,524,1.556,525,1.556,526,1.556,527,1.556,528,1.556,529,1.556,530,1.556,531,1.556,532,1.556,533,1.556,534,1.556,535,1.556,536,2.507,537,1.556,538,1.556,539,1.556]],["title/modules/UsersModule.html",[18,1.016,32,1.365]],["body/modules/UsersModule.html",[2,1.533,3,0.379,4,0.326,5,0.326,7,0.624,8,0.038,9,0.763,12,0.379,13,0.025,16,0.026,17,0.026,18,1.768,20,1.379,21,1.379,22,1.703,23,1.703,24,1.379,25,2.807,26,2.807,30,2.071,32,2.504,33,2.308,34,1.703,35,1.528,37,1.913,74,2.593,89,2.402,234,2.528,257,2.176,311,1.703,314,2.176,427,2.941,428,2.528,438,1.913,447,2.176,471,2.941,494,2.528,517,2.528,540,2.528,541,2.528,542,2.528,543,3.063,544,3.063,545,3.063,546,3.063,547,3.063,548,3.063,549,3.063]],["title/coverage.html",[550,2.929]],["body/coverage.html",[0,1.832,1,1.835,5,0.313,6,2.426,8,0.037,10,1.466,13,0.033,16,0.025,17,0.025,24,1.323,50,1.832,52,2.426,63,1.835,64,2.426,67,1.323,83,2.426,89,1.197,93,0.732,111,1.634,113,2.426,136,1.835,216,2.088,241,2.426,249,2.867,260,2.426,261,2.426,265,1.466,266,2.426,291,1.835,298,1.634,299,2.426,300,2.426,317,2.088,318,2.867,353,1.835,354,2.426,364,1.835,365,2.426,376,1.835,377,2.426,383,2.088,403,1.466,431,2.426,443,2.426,445,2.426,471,1.835,472,2.426,514,2.088,550,2.088,551,2.938,552,5.993,553,5.2,554,4.609,555,4.609,556,2.426,557,4.609,558,2.938,559,2.938,560,2.938,561,2.938,562,2.938]],["title/dependencies.html",[21,1.639,563,2.096]],["body/dependencies.html",[8,0.038,9,0.956,13,0.029,16,0.03,17,0.03,21,1.726,162,2.725,210,1.726,213,2.725,218,2.396,221,1.914,233,2.725,367,3.166,368,3.166,564,3.835,565,3.835,566,5.251,567,3.835,568,3.835,569,3.835,570,3.835,571,3.835,572,3.835,573,3.835,574,3.835,575,3.835,576,3.835,577,3.835,578,3.835,579,3.835,580,3.835,581,3.835,582,3.835]],["title/miscellaneous/enumerations.html",[583,1.586,584,3.007]],["body/miscellaneous/enumerations.html",[8,0.037,16,0.03,17,0.03,53,0.785,122,3.028,127,2.419,145,4.002,164,3.309,168,4.002,455,3.444,583,2.428,584,3.209,585,4.848,586,3.887,587,4.848,588,4.848,589,4.848,590,4.848,591,4.848]],["title/miscellaneous/functions.html",[583,1.586,592,3.007]],["body/miscellaneous/functions.html",[8,0.034,16,0.031,17,0.031,24,2.458,53,0.846,59,1.398,91,1.885,92,1.885,93,1.044,94,1.273,223,2.616,291,3.17,318,2.975,330,4.685,556,3.457,583,2.616,592,3.457,593,4.187,594,4.187,595,4.187,596,4.187]],["title/index.html",[53,0.513,597,2.539,598,2.539]],["body/index.html",[4,0.265,8,0.036,16,0.022,17,0.022,35,2.301,46,2.965,80,1.243,128,2.632,147,1.015,191,3.807,233,1.77,235,3.807,246,2.056,247,3.478,295,1.385,312,2.056,346,1.77,396,2.056,514,1.77,550,1.77,599,2.491,600,2.491,601,4.213,602,2.491,603,2.491,604,2.491,605,2.491,606,2.491,607,2.491,608,2.491,609,2.491,610,4.612,611,2.491,612,5.25,613,2.491,614,5.25,615,2.491,616,2.491,617,2.491,618,3.592,619,2.491,620,2.491,621,2.491,622,4.213,623,2.491,624,3.592,625,2.491,626,2.491,627,2.491,628,2.491,629,2.491,630,2.491,631,2.491,632,3.592,633,2.491,634,4.213,635,2.491,636,3.807,637,3.592,638,2.491,639,2.491,640,2.491,641,2.491,642,2.491,643,2.491,644,4.213,645,2.491,646,2.491,647,2.491,648,2.491,649,2.491,650,2.491,651,4.213,652,2.491,653,2.491,654,2.491,655,2.491,656,2.491,657,3.592,658,2.491,659,2.491,660,2.491,661,2.491,662,2.491,663,3.592,664,2.491,665,2.491,666,2.491,667,3.592,668,3.592,669,2.491,670,2.491,671,2.491,672,2.491,673,2.491,674,2.491,675,2.491,676,2.491,677,2.491,678,2.056,679,2.491,680,2.491,681,2.491,682,2.491,683,2.491,684,2.491,685,2.056]],["title/modules.html",[20,1.856]],["body/modules.html",[8,0.032,16,0.032,17,0.032,19,2.68,20,1.931,30,2.141,31,2.386,32,1.931,636,4.724,686,5.723,687,5.723,688,5.723]],["title/overview.html",[689,3.403]],["body/overview.html",[2,1.177,8,0.037,10,2.397,16,0.026,17,0.026,18,1.068,19,3.649,20,1.434,21,1.434,22,1.772,23,1.772,24,1.434,25,1.772,26,1.772,27,2.631,28,2.631,29,2.631,30,2.746,31,3.125,32,2.529,33,2.371,34,1.772,35,1.59,51,1.772,67,2.529,70,2.631,71,2.631,72,2.631,89,2.289,112,1.298,166,2.264,403,2.397,422,2.631,424,2.631,540,2.631,541,2.631,542,2.631,689,2.631,690,4.805]],["title/properties.html",[114,1.484,563,2.096]],["body/properties.html",[8,0.037,16,0.033,17,0.033,114,1.839,147,1.839,678,3.727,685,3.727,691,4.515,692,4.515,693,4.515]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":692,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.25",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":440,"title":{},"body":{"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":482,"title":{},"body":{"controllers/UsersController.html":{}}}],["12134",{"_index":470,"title":{},"body":{"injectables/UserService.html":{}}}],["1234",{"_index":305,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":302,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["16t07:46:32+0000",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1})@apioperation({summary",{"_index":484,"title":{},"body":{"controllers/UsersController.html":{}}}],["2",{"_index":442,"title":{},"body":{"injectables/PostService.html":{}}}],["2.0.5",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":398,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":385,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3.5.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["3.6.0",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":690,"title":{},"body":{"overview.html":{}}}],["7",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"overview.html":{}}}],["7.4.0",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["added",{"_index":511,"title":{},"body":{"controllers/UsersController.html":{}}}],["addhours",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{}}}],["alic@doe.com",{"_index":469,"title":{},"body":{"injectables/UserService.html":{}}}],["alice",{"_index":468,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":673,"title":{},"body":{"index.html":{}}}],["api",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":405,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":382,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({description",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({type",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":499,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":406,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":407,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":410,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('users",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["applications",{"_index":607,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["args",{"_index":325,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["args.constraints",{"_index":340,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["args.object",{"_index":342,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["args.property",{"_index":344,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["argument",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{}}}],["array",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["associate",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["async",{"_index":334,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["auth",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":63,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":678,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":67,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["backers",{"_index":674,"title":{},"body":{"index.html":{}}}],["based",{"_index":490,"title":{},"body":{"controllers/UsersController.html":{}}}],["before",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{}}}],["board",{"_index":666,"title":{},"body":{"index.html":{}}}],["body",{"_index":401,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsEqualTo.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":688,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":686,"title":{},"body":{"modules.html":{}}}],["building",{"_index":602,"title":{},"body":{"index.html":{}}}],["business",{"_index":447,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["channel",{"_index":639,"title":{},"body":{"index.html":{}}}],["character",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["check",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["circle",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["circular",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":422,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":423,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":424,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":540,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":541,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":542,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":630,"title":{},"body":{"index.html":{}}}],["compare",{"_index":338,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["compodoc/compodoc",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":548,"title":{},"body":{"modules/UsersModule.html":{}}}],["confirmpassword",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["connect",{"_index":444,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(createpostdto",{"_index":419,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(createuserdto",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(formatiso(addhours(date",{"_index":418,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(isauth",{"_index":465,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(patchpostdto",{"_index":421,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(value",{"_index":336,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["const",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsEqualTo.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constraints",{"_index":352,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["constructor",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":451,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["constructor(userservice",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["content",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content'})@isstring()@isoptional",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('post",{"_index":411,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('users",{"_index":510,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["conversion",{"_index":316,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["convert",{"_index":313,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["courses",{"_index":646,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":550,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{}}}],["create.post",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["create.user.dto",{"_index":332,"title":{},"body":{"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":387,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost",{"_index":378,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(@body",{"_index":417,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":381,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":111,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createpostmetaoptiondto",{"_index":136,"title":{"classes/CreatePostMetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["createuser",{"_index":372,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":475,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":265,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto)[relatedpropertyname",{"_index":343,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["custom",{"_index":333,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["custom.user.dto",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["database",{"_index":458,"title":{},"body":{"injectables/UserService.html":{}}}],["date",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":348,"title":{},"body":{"classes/IsEqualTo.html":{},"controllers/UsersController.html":{}}}],["decorators",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":641,"title":{},"body":{"index.html":{}}}],["default",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["defaultmessage",{"_index":321,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["defaultmessage(args",{"_index":323,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["defaultvaluepipe",{"_index":495,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":56,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["description",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":615,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":652,"title":{},"body":{"index.html":{}}}],["dick",{"_index":441,"title":{},"body":{"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["dir/post/dtos/create.post.dto",{"_index":361,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["direct",{"_index":509,"title":{},"body":{"controllers/UsersController.html":{}}}],["discord",{"_index":638,"title":{},"body":{"index.html":{}}}],["dive",{"_index":640,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"index.html":{}}}],["draft",{"_index":589,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["draft\",\"scheduled\",\"review\",\"published",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["dtos",{"_index":374,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["dtos/create.post.dto",{"_index":408,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/create.user.dto",{"_index":497,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/get",{"_index":461,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch.post.dto",{"_index":409,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/patch.user.dto",{"_index":498,"title":{},"body":{"controllers/UsersController.html":{}}}],["e2e",{"_index":625,"title":{},"body":{"index.html":{}}}],["each",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":603,"title":{},"body":{"index.html":{}}}],["eight",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["end",{"_index":507,"title":{},"body":{"controllers/UsersController.html":{}}}],["enterprise",{"_index":656,"title":{},"body":{"index.html":{}}}],["entire",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["entries",{"_index":479,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":584,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["equal",{"_index":345,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["error",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{}}}],["example",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["existing",{"_index":397,"title":{},"body":{"controllers/PostController.html":{}}}],["expecting",{"_index":315,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["experience",{"_index":643,"title":{},"body":{"index.html":{}}}],["explicitly",{"_index":429,"title":{},"body":{"modules/PostModule.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exported",{"_index":430,"title":{},"body":{"modules/PostModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":355,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{},"controllers/UsersController.html":{}}}],["featured",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetched",{"_index":489,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":485,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":628,"title":{},"body":{"index.html":{}}}],["field",{"_index":337,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["final",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["findall",{"_index":432,"title":{},"body":{"injectables/PostService.html":{}}}],["findall(userid",{"_index":434,"title":{},"body":{"injectables/PostService.html":{}}}],["findallusers",{"_index":449,"title":{},"body":{"injectables/UserService.html":{}}}],["findallusers(getuserparamdto",{"_index":453,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid",{"_index":450,"title":{},"body":{"injectables/UserService.html":{}}}],["findbyid(id",{"_index":459,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["firstname",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["fns",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"dependencies.html":{}}}],["follow",{"_index":659,"title":{},"body":{"index.html":{}}}],["followed",{"_index":504,"title":{},"body":{"controllers/UsersController.html":{}}}],["formatiso",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{}}}],["formatiso(addhours(new",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forward",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{}}}],["forwardref",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":601,"title":{},"body":{"index.html":{}}}],["full",{"_index":655,"title":{},"body":{"index.html":{}}}],["function",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{},"coverage.html":{}}}],["functions",{"_index":592,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":347,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["get('/:id",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apiquery({name",{"_index":478,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":392,"title":{},"body":{"controllers/PostController.html":{}}}],["gethello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["getpost",{"_index":379,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(@param('userid",{"_index":413,"title":{},"body":{"controllers/PostController.html":{}}}],["getpost(userid",{"_index":391,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":597,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":298,"title":{"classes/GetUserParamDto.html":{}},"body":{"classes/GetUserParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getusers",{"_index":473,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":477,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":648,"title":{},"body":{"index.html":{}}}],["group",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{}}}],["grow",{"_index":670,"title":{},"body":{"index.html":{}}}],["handle",{"_index":505,"title":{},"body":{"controllers/UsersController.html":{}}}],["hands",{"_index":642,"title":{},"body":{"index.html":{}}}],["handy",{"_index":631,"title":{},"body":{"index.html":{}}}],["head",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{}}}],["header",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["headers",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":61,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":653,"title":{},"body":{"index.html":{}}}],["here",{"_index":312,"title":{},"body":{"classes/GetUserParamDto.html":{},"index.html":{}}}],["http://localhoost:3000",{"_index":500,"title":{},"body":{"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost:3000/users",{"_index":503,"title":{},"body":{"controllers/UsersController.html":{}}}],["https://nestjs.com",{"_index":682,"title":{},"body":{"index.html":{}}}],["https://schme.org",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["identifier",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["imaged",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["implements",{"_index":319,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["index",{"_index":53,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["inject(forwardref",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":50,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":437,"title":{},"body":{"injectables/PostService.html":{}}}],["injection",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["inside",{"_index":314,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["installcompile",{"_index":613,"title":{},"body":{"index.html":{}}}],["instance",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["inter",{"_index":436,"title":{},"body":{"injectables/PostService.html":{}}}],["interact",{"_index":649,"title":{},"body":{"index.html":{}}}],["intra",{"_index":412,"title":{},"body":{"controllers/PostController.html":{}}}],["ip",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["isemail",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttypes)@isnotempty()@matches(/^[a",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status)@isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isequal",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IsEqualTo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["isequal('password",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isequal(property",{"_index":595,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isequalto",{"_index":317,"title":{"classes/IsEqualTo.html":{}},"body":{"classes/IsEqualTo.html":{},"coverage.html":{}}}],["isint",{"_index":304,"title":{},"body":{"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isint()@isnotempty()@apiproperty({description",{"_index":357,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson()@isoptional",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isstring",{"_index":262,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["isoptional",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["isstring",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@isequal('password",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":663,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":665,"title":{},"body":{"index.html":{}}}],["john",{"_index":466,"title":{},"body":{"injectables/UserService.html":{}}}],["john@doe.com",{"_index":467,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":676,"title":{},"body":{"index.html":{}}}],["json",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":679,"title":{},"body":{"index.html":{}}}],["key",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"controllers/UsersController.html":{}}}],["lastname",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":633,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":685,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":668,"title":{},"body":{"index.html":{}}}],["limit",{"_index":454,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["linkedin",{"_index":661,"title":{},"body":{"index.html":{}}}],["list",{"_index":486,"title":{},"body":{"controllers/UsersController.html":{}}}],["local",{"_index":547,"title":{},"body":{"modules/UsersModule.html":{}}}],["localhost",{"_index":502,"title":{},"body":{"controllers/UsersController.html":{}}}],["logic",{"_index":311,"title":{},"body":{"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["login",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":662,"title":{},"body":{"index.html":{}}}],["loop",{"_index":658,"title":{},"body":{"index.html":{}}}],["maintain",{"_index":370,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["make",{"_index":371,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["mandatory",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["mapped",{"_index":373,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["match",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maxlength",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mean",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"modules/UsersModule.html":{}}}],["message",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/IsEqualTo.html":{}}}],["meta",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["metadata",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":457,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["methods",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/IsEqualTo.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["minimum",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":583,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":667,"title":{},"body":{"index.html":{}}}],["mode",{"_index":618,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":634,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":680,"title":{},"body":{"index.html":{}}}],["name",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsEqualTo.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"modules/PostModule.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["needs",{"_index":358,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nest.js",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["nestframework",{"_index":684,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":367,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":383,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":600,"title":{},"body":{"index.html":{}}}],["normally",{"_index":306,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["now",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["npm",{"_index":612,"title":{},"body":{"index.html":{}}}],["null",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["number",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{}}}],["object.constructor",{"_index":351,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["offer",{"_index":664,"title":{},"body":{"index.html":{}}}],["official",{"_index":644,"title":{},"body":{"index.html":{}}}],["one",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":669,"title":{},"body":{"index.html":{}}}],["operation",{"_index":448,"title":{},"body":{"injectables/UserService.html":{}}}],["option",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{}}}],["options.ts",{"_index":261,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["options.ts:6",{"_index":263,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["options.ts:9",{"_index":264,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["output",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["overview",{"_index":689,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":563,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":455,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["pair",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":308,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"classes/IsEqualTo.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["parent",{"_index":375,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["parseintpipe",{"_index":496,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":654,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":362,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":356,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":366,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["pass",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["passed",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":402,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":353,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["patchuser",{"_index":474,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":492,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":364,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["paths",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":481,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":446,"title":{},"body":{"injectables/UserService.html":{}}}],["person",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["pipe",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["please",{"_index":637,"title":{},"body":{"index.html":{}}}],["point",{"_index":335,"title":{},"body":{"classes/IsEqualTo.html":{},"controllers/UsersController.html":{}}}],["position",{"_index":483,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post','page','story','series",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@apiresponse({status",{"_index":384,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isstring()@isnotempty",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.controller",{"_index":426,"title":{},"body":{"modules/PostModule.html":{}}}],["post/post.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":376,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postmodule",{"_index":31,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postservice",{"_index":403,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posttypes",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":620,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":599,"title":{},"body":{"index.html":{}}}],["project",{"_index":610,"title":{},"body":{"index.html":{}}}],["properties",{"_index":114,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"properties.html":{}}}],["property",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{},"miscellaneous/functions.html":{}}}],["propertyname",{"_index":349,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["provide",{"_index":549,"title":{},"body":{"modules/UsersModule.html":{}}}],["provider",{"_index":428,"title":{},"body":{"modules/PostModule.html":{},"modules/UsersModule.html":{}}}],["provider/auth.service",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["provider/post.service",{"_index":404,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/users.service",{"_index":494,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providing",{"_index":546,"title":{},"body":{"modules/UsersModule.html":{}}}],["public",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":307,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":635,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["re",{"_index":508,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":346,"title":{},"body":{"classes/IsEqualTo.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":650,"title":{},"body":{"index.html":{}}}],["ref",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["reflect",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["registerdecorator",{"_index":329,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["registered",{"_index":487,"title":{},"body":{"controllers/UsersController.html":{}}}],["related",{"_index":506,"title":{},"body":{"controllers/UsersController.html":{}}}],["relatedpropertyname",{"_index":339,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["relatedvalue",{"_index":341,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["repository",{"_index":609,"title":{},"body":{"index.html":{}}}],["request",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":629,"title":{},"body":{"index.html":{}}}],["response",{"_index":386,"title":{},"body":{"controllers/PostController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":60,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/IsEqualTo.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returned",{"_index":480,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":58,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/IsEqualTo.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":591,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["routing",{"_index":501,"title":{},"body":{"controllers/UsersController.html":{}}}],["run",{"_index":614,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":604,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":590,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["send",{"_index":309,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["serialize",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":588,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":605,"title":{},"body":{"index.html":{}}}],["service",{"_index":427,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["setup",{"_index":611,"title":{},"body":{"index.html":{}}}],["side",{"_index":606,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["spaces",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":301,"title":{},"body":{"classes/GetUserParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["specify",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["sponsors",{"_index":672,"title":{},"body":{"index.html":{}}}],["src/.../custom.user.dto.ts",{"_index":594,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../main.ts",{"_index":593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":585,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":57,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":545,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/provider/auth.service",{"_index":463,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/provider/auth.service.ts",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/provider/auth.service.ts:11",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:17",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/provider/auth.service.ts:5",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":556,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dtos/create.post",{"_index":260,"title":{},"body":{"classes/CreatePostMetaOptionDto.html":{},"coverage.html":{}}}],["src/post/dtos/create.post.dto.ts",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/create.post.dto.ts:103",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:133",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:29",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:41",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:49",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:57",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:65",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:75",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:83",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/create.post.dto.ts:91",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/post/dtos/patch.post.dto.ts",{"_index":354,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/dtos/patch.post.dto.ts:11",{"_index":360,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":586,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":377,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:15",{"_index":393,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:27",{"_index":389,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:41",{"_index":400,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.module.ts",{"_index":425,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/provider/post.service.ts",{"_index":431,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/provider/post.service.ts:5",{"_index":433,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/provider/post.service.ts:9",{"_index":435,"title":{},"body":{"injectables/PostService.html":{}}}],["src/users/dtos/create.user.dto.ts",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/create.user.dto.ts:17",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:23",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:27",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:40",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/create.user.dto.ts:45",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["src/users/dtos/custom.user.dto.ts",{"_index":318,"title":{},"body":{"classes/IsEqualTo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dtos/custom.user.dto.ts:14",{"_index":328,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["src/users/dtos/custom.user.dto.ts:21",{"_index":324,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["src/users/dtos/get",{"_index":299,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch.user.dto.ts",{"_index":365,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["src/users/providers/users.service.ts",{"_index":443,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:18",{"_index":456,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:41",{"_index":460,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:9",{"_index":452,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":472,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:61",{"_index":491,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":476,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:86",{"_index":493,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":543,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":616,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":619,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":621,"title":{},"body":{"index.html":{}}}],["started",{"_index":598,"title":{"index.html":{}},"body":{}}],["starter",{"_index":608,"title":{},"body":{"index.html":{}}}],["statements",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["stay",{"_index":657,"title":{},"body":{"index.html":{}}}],["story",{"_index":587,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string",{"_index":59,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["successfully",{"_index":416,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":399,"title":{},"body":{"controllers/PostController.html":{}}}],["successfully'})@post",{"_index":388,"title":{},"body":{"controllers/PostController.html":{}}}],["summary",{"_index":415,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":636,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":687,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["table",{"_index":445,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":369,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["target",{"_index":350,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["test",{"_index":624,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":627,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":626,"title":{},"body":{"index.html":{}}}],["tests",{"_index":622,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":671,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":464,"title":{},"body":{"injectables/UserService.html":{}}}],["this.postservice.findall(userid",{"_index":414,"title":{},"body":{"controllers/PostController.html":{}}}],["this.userservice.findallusers(getuserparamdto",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findbyid(1234",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findbyid(parseint(userid",{"_index":439,"title":{},"body":{"injectables/PostService.html":{}}}],["those",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["thrown",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tile",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":651,"title":{},"body":{"index.html":{}}}],["title",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostService.html":{}}}],["title'})@isstring()@minlength(4)@isnotempty",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["touch",{"_index":677,"title":{},"body":{"index.html":{}}}],["transform",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["transformation",{"_index":310,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["transformer",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["true",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@minlength(3",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":683,"title":{},"body":{"index.html":{}}}],["type",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["types",{"_index":368,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{},"index.html":{}}}],["typescript\"]'})@isarray()@isstring({each",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":623,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":693,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":363,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@type(undefined",{"_index":359,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":380,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":420,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":395,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":396,"title":{},"body":{"controllers/PostController.html":{},"index.html":{}}}],["url",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["use",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{}}}],["user",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUserParamDto.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user'})@apiresponse({status",{"_index":488,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":462,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":300,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["user.dto.ts:17",{"_index":303,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["userid",{"_index":394,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["users",{"_index":438,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users.controller",{"_index":544,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":471,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":89,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{},"index.html":{}}}],["validate",{"_index":322,"title":{},"body":{"classes/IsEqualTo.html":{},"controllers/UsersController.html":{}}}],["validate(value",{"_index":326,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["validatenested",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchUserDto.html":{}}}],["validationarguments",{"_index":327,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["validationoptions",{"_index":330,"title":{},"body":{"classes/IsEqualTo.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/IsEqualTo.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":331,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["validatorconstraintinterface",{"_index":320,"title":{},"body":{"classes/IsEqualTo.html":{}}}],["value",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionDto.html":{},"classes/IsEqualTo.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":691,"title":{},"body":{"properties.html":{}}}],["video",{"_index":645,"title":{},"body":{"index.html":{}}}],["visit",{"_index":632,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":647,"title":{},"body":{"index.html":{}}}],["void",{"_index":390,"title":{},"body":{"controllers/PostController.html":{}}}],["want",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/IsEqualTo.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":617,"title":{},"body":{"index.html":{}}}],["website",{"_index":681,"title":{},"body":{"index.html":{}}}],["without",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["work",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["world",{"_index":62,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":660,"title":{},"body":{"index.html":{}}}],["yes",{"_index":596,"title":{},"body":{"miscellaneous/functions.html":{}}}],["you'd",{"_index":675,"title":{},"body":{"index.html":{}}}],["z0",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&./]{8",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&./])[a",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { AuthModule } from './auth/auth.module';\n@Module({\n  // app module will import entire file that\n  // associate with user module into application\n  // nest.js would be able to use those file\n  imports: [UsersModule, PostModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './provider/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './provider/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n\n  // when is circle dependency injection need to use forward-ref\n  imports: [forwardRef(() => UsersModule)],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/provider/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/provider/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/provider/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // circular dependency injection\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n  public login(email: string, password: string, id: string) {\n    const user = this.userService.findById(1234);\n\n    return 'Sample_token';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create.post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the content of post', example: 'The post content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured Imaged for your blog post', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostTypes\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostTypes, description: 'Possible values, 'post','page','story','series' '})@IsEnum(PostTypes)@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Default value : formatISO(addHours(new Date(), 7)) as null as Date\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blog post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:91\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown', example: '{\n \"@context\": \"https://schme.org\", \n \"@type\": \"Person\" \n }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For Example - 'my-url'', example: 'my-blog-post'})@IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: Status, description: 'Possible values: \"draft\",\"scheduled\",\"review\",\"published\" '})@IsEnum(Status)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string value', example: '[\"nestjs\", \"typescript\"]'})@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'This is the tile for the blog post', example: 'this is a title'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { addHours, formatISO } from 'date-fns';\nimport { PostTypes, Status } from '../enums/postType.enum';\nimport { CreatePostMetaOptionDto } from './create.post-meta-options';\nimport { Type } from 'class-transformer';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  // api-property work only property that required\n  @ApiProperty({\n    description: 'This is the tile for the blog post',\n    example: 'this is a title',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostTypes,\n    description: \"Possible values, 'post','page','story','series' \",\n  })\n  @IsEnum(PostTypes)\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  postType: PostTypes;\n\n  @ApiProperty({\n    description: \"For Example - 'my-url'\",\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  slug: string;\n\n  @ApiProperty({\n    enum: Status,\n    description: 'Possible values: \"draft\",\"scheduled\",\"review\",\"published\" ',\n  })\n  @IsEnum(Status)\n  @IsNotEmpty()\n  status: Status;\n\n  @ApiPropertyOptional({\n    description: 'This is the content of post',\n    example: 'The post content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n    example:\n      '{\\r\\n \"@context\": \"https://schme.org\", \\r\\n \"@type\": \"Person\" \\r\\n }',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured Imaged for your blog post',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blog post is published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date = formatISO(addHours(new Date(), 7)) as null as Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string value',\n    example: '[\"nestjs\", \"typescript\"]',\n  })\n  @IsArray()\n  // each : true mean check each value of the array\n  // check each value is string or not\n  @IsString({ each: true })\n  //  each string in array need to have minimum 3 characters\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  // working with nest-object need to use validateNested and Type\n  @ValidateNested({ each: true })\n  // type need to pass function as a argument and the output of this function\n  // should be the final DTO you want to match\n  // match incoming request to particular dto and create instance of Dto\n  @Type(() => CreatePostMetaOptionDto)\n  metaOptions?: CreatePostMetaOptionDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionDto.html":{"url":"classes/CreatePostMetaOptionDto.html","title":"class - CreatePostMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create.post-meta-options.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post-meta-options.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create.post-meta-options.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionDto {\n  @IsNotEmpty()\n  @IsString()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create.user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                confirmPassword\n                            \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        confirmPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsEqual('password')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&./])[A-Za-z\\d@$!%*#?&./]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create.user.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nimport { IsEqual } from './custom.user.dto';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  // using regex\n  @Matches(\n    /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&./])[A-Za-z\\d@$!%*#?&./]{8,}$/,\n    {\n      message:\n        'Minimum eight characters, at least one letter, one number and one special character',\n    },\n  )\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsEqual('password')\n  confirmPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamDto.html":{"url":"classes/GetUserParamDto.html","title":"class - GetUserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with specific Id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUserParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with specific Id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  // normally query and param send and string\n  // need to transformation logic here to convert\n  // string to number by using class-transformer inside dto\n  // what expecting to class validator to conversion\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IsEqualTo.html":{"url":"classes/IsEqualTo.html","title":"class - IsEqualTo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IsEqualTo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/custom.user.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/dtos/custom.user.dto.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(value: string, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/dtos/custom.user.dto.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  registerDecorator,\n  ValidationArguments,\n  ValidationOptions,\n  ValidatorConstraint,\n  ValidatorConstraintInterface,\n} from 'class-validator';\nimport { CreateUserDto } from './create.user.dto';\n\n//custom class validation\n@ValidatorConstraint({ name: 'IsEqualTo', async: false })\nclass IsEqualTo implements ValidatorConstraintInterface {\n  // validation logic, validation Argument will point to Object that we want\n  validate(value: string, args: ValidationArguments) {\n    // console.log(value, args);\n    // which field you want to compare\n    const [relatedPropertyName] = args.constraints;\n    const relatedValue = (args.object as CreateUserDto)[relatedPropertyName];\n    return value === relatedValue;\n  }\n  defaultMessage(args: any) {\n    const [relatedPropertyName] = args.constraints;\n    return `${args.property} must equal ${relatedPropertyName}`; // Custom error message\n  }\n}\n\n// read\n//generate custom validation decorator for using to compare\nexport function IsEqual(\n  property: string,\n  validationOptions?: ValidationOptions,\n) {\n  return (object: CreateUserDto, propertyName: string) => {\n    registerDecorator({\n      name: 'isEqual',\n      target: object.constructor,\n      propertyName: propertyName,\n      // which field you want to compare\n      constraints: [property],\n      options: validationOptions,\n      // which  custom class validate want to use for validate your logic\n      validator: IsEqualTo,\n    });\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch.post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@ApiProperty({description: 'The Id of the post that needs to be updated'})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch.post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreatePostDto } from '@dir/post/dtos/create.post.dto';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @IsInt()\n  @IsNotEmpty()\n  @ApiProperty({ description: 'The Id of the post that needs to be updated' })\n  @Type(() => Number)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch.user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create.user.dto';\n\n// take all property of create Dto class maintain all validation\n// logic make all properties of createUser Dto As optional properties\n// by using PartialType mapped-types\n// create Dtos from parent DtoS\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new blog of post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPost(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an existing blog post'})@ApiResponse({status: 200, description: 'Get 200 response, if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostService } from './provider/post.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create.post.dto';\nimport { addHours, formatISO } from 'date-fns';\nimport { PatchPostDto } from './dtos/patch.post.dto';\n\n@ApiTags('Posts')\n@Controller('post')\nexport class PostController {\n  // Injection dependency intra-dependency\n  constructor(private readonly postService: PostService) {}\n\n  @Get('/:userId?')\n  public getPost(@Param('userId') userId: string) {\n    return this.postService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Create a new blog of post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(formatISO(addHours(Date(), 7)));\n\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an existing blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Get 200 response, if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './provider/post.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostController],\n  providers: [PostService],\n  // need to import entire module\n  // nest.js will only import the service or provider that have been\n  // explicitly exported from user module\n  imports: [UsersModule],\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/provider/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/post/provider/post.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/provider/post.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class PostService {\n  // inter-module dependency injection\n  // injecting Users service to post module\n  constructor(private readonly userService: UserService) {}\n  public findAll(userId: string) {\n    const user = this.userService.findById(parseInt(userId, 10));\n\n    return [\n      {\n        user: user,\n        title: 'dick',\n      },\n      {\n        user: user,\n        title: 'dick 2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operation\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAllUsers\n                            \n                            \n                                    Public\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAllUsers(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:18\n                        \n                    \n\n\n            \n                \n                        The method to get all the users from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:41\n                        \n                    \n\n\n            \n                \n                        The method to get specific user from database by Id  of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUserParamDto } from '../dtos/get-user.dto';\nimport { AuthService } from 'src/auth/provider/auth.service';\n\n/**\n * Class to connect to Users table and perform business operation\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    // circular dependency injection\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n  /**\n   * The method to get all the users from database\n   */\n  public findAllUsers(\n    getUserParamDto: GetUserParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com ',\n      },\n      {\n        firstName: 'alice',\n        email: 'alic@doe.com ',\n      },\n    ];\n  }\n\n  /**\n   * The method to get specific user from database by Id  of user\n   */\n  public findById(id: number) {\n    return {\n      id: 12134,\n      firstName: 'John',\n      email: 'john@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})@ApiOperation({summary: 'Fetches a list of registered user'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:86\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { UserService } from './providers/users.service';\nimport {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create.user.dto';\nimport { GetUserParamDto } from './dtos/get-user.dto';\nimport { PatchUserDto } from './dtos/patch.user.dto';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// http://localhoost:3000\n// all routing will point to localhost\n\n//read\n// http://localhost:3000/users\n// this will url followed by users should be handle by this controller\n// handle request that related to users api end point\n// will re-direct to  particular this controller\n\n@Controller('users')\n// All method inside the particular  controller\n// would be added to specific group on the swagger documentation\n@ApiTags('Users')\nexport class UsersController {\n  // inject service now it available to do business logic\n  constructor(private readonly userService: UserService) {}\n  // /:id? will make id param as optional\n  // need to have mandatory param first before get optional params\n  @Get('/:id?')\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  @ApiOperation({\n    summary: 'Fetches a list of registered user',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  // get specific key value pair from params and query by pass it to\n  // decorator\n  public getUsers(\n    // validate specific param with pipe need to specify specific key\n    // @Param('id', ParseIntPipe) params: number | undefined,\n    // read validate incoming request from param and query by dto\n    @Param() getUserParamDto: GetUserParamDto,\n    // default value for limit query for limit and page\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe)\n    limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.userService.findAllUsers(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUser(\n    @Body() createUserDto: CreateUserDto,\n    // @Headers() header: any,\n    // @Ip() ip: any,\n  ) {\n    console.log(createUserDto);\n\n    return 'dick head';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  // providers mean providing particular service to\n  // the local component of the users module\n  // business logic should be inside your provide class\n  providers: [UserService],\n  // exports can only with provider or service\n  // this service will available to other module\n  exports: [UserService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/provider/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/create.post-meta-options.ts\n            \n            class\n            CreatePostMetaOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create.post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/dtos/patch.post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/post/provider/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create.user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/custom.user.dto.ts\n            \n            class\n            IsEqualTo\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/custom.user.dto.ts\n            \n            function\n            IsEqual\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user.dto.ts\n            \n            class\n            GetUserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch.user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            date-fns : ^3.6.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typescript-transform-paths : ^3.5.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostTypes   (src/.../postType.enum.ts)\n                        \n                        \n                            Status   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostTypes\n                    \n                \n                        \n                            \n                                 post\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 page\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 story\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 series\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 draft\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 scheduled\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 review\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 published\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            IsEqual   (src/.../custom.user.dto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/users/dtos/custom.user.dto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsEqual\n                        \n                    \n                \n            \n            \n                \nIsEqual(property: string, validationOptions?: ValidationOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                property\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                validationOptions\n                                            \n                                                        ValidationOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
